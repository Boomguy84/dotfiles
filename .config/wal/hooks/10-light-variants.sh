#!/usr/bin/env bash
# pywal hook: compute lighter/darker variants and export as extra XRDB keys.

set -euo pipefail

JSON="${HOME}/.cache/wal/colors.json"
OUT="${HOME}/.cache/wal/extras.Xresources"

python3 - <<'PY'
import json, os

json_path = os.path.expanduser("~/.cache/wal/colors.json")
out_path  = os.path.expanduser("~/.cache/wal/extras.Xresources")

with open(json_path, "r") as f:
    data = json.load(f)

bg = data["special"]["background"].lstrip("#")
fg = data["special"]["foreground"].lstrip("#")

def hex_to_rgb(h):
    return tuple(int(h[i:i+2], 16) for i in (0, 2, 4))

def rgb_to_hex(rgb):
    return "#{:02X}{:02X}{:02X}".format(*rgb)

def lighten(rgb, pct):
    # pct in [0,1]; move each channel toward 255
    return tuple(min(255, round(c + (255 - c) * pct)) for c in rgb)

def darken(rgb, pct):
    # pct in [0,1]; move each channel toward 0
    return tuple(max(0, round(c * (1 - pct))) for c in rgb)

bg_rgb = hex_to_rgb(bg)

# Tweak these amounts to taste:
lighter_1 = rgb_to_hex(lighten(bg_rgb, 0.06))  # +5% toward white
lighter_2 = rgb_to_hex(lighten(bg_rgb, 0.20))  # +20% toward white
darker_1  = rgb_to_hex(darken(bg_rgb, 0.10))   # -10% toward black

with open(out_path, "w") as f:
    f.write("! Auto-generated by pywal hook 10-light-variants\n")
    # Provide wildcard (*) and bare resources for compatibility
    for k, v in {
        "*.lighterbg": lighter_1,
        "*lighterbg":  lighter_1,
        "*.lighterbg2": lighter_2,
        "*lighterbg2":  lighter_2,
        "*.darkerbg":  darker_1,
        "*darkerbg":   darker_1,
    }.items():
        f.write(f"{k}: {v}\n")
PY

# Merge into current xrdb so immediate sessions pick it up:
xrdb -merge "$OUT" 2>/dev/null || true
