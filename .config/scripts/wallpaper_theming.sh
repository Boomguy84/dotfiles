#!/usr/bin/env bash
set -euo pipefail

# --- SETTINGS ---------------------------------------------------------------
# Folder containing wallpapers (change if you keep them elsewhere)
WALL_DIR="$HOME/.config/wallpapers"

# Hyprland include that we will (re)generate from pywal
HYPR_WAL="$HOME/.cache/wal/hyprland-wal.conf"

# Destination for hyprlock-specific theme
HYPRLOCK_WAL="$HOME/.cache/wal/hyprlock-wal.conf"

# --- PICK IMAGE -------------------------------------------------------------
IMG="${1:-}"
STATE_FILE="$HOME/.cache/current_wall.txt"

# Build a stable, sorted list of wallpapers
mapfile -t CAND < <(find "$WALL_DIR" -type f \( -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.png' \) | sort)
((${#CAND[@]})) || {
  echo "No images found in $WALL_DIR"
  exit 1
}

if [[ -n "$IMG" ]]; then
  # If an explicit image was provided, trust it (and record it)
  echo "$IMG" >"$STATE_FILE"
  ln -sf "$IMG" "$HOME/.cache/current_wall.png"
else
  # Read last used (if any)
  LAST=""
  [[ -f "$STATE_FILE" ]] && LAST="$(<"$STATE_FILE")"

  # Find the index of LAST in CAND
  IDX=-1
  if [[ -n "$LAST" ]]; then
    for i in "${!CAND[@]}"; do
      if [[ "${CAND[$i]}" == "$LAST" ]]; then
        IDX=$i
        break
      fi
    done
  fi

  # Pick the next one (wrap at end). If LAST not found, start at first.
  if ((IDX >= 0)); then
    NEXT=$(((IDX + 1) % ${#CAND[@]}))
    IMG="${CAND[$NEXT]}"
  else
    IMG="${CAND[0]}"
  fi

  # Record new wallpaper and update symlink for Hyprlock
  echo "$IMG" >"$STATE_FILE"
  ln -sf "$IMG" "$HOME/.cache/current_wall.png"
fi

# --- SET WITH SWWW ----------------------------------------------------------
swww img "$IMG" --transition-type fade --transition-pos 0.5,0.5 --transition-duration 1

# --- GENERATE WAL PALETTE ---------------------------------------------------
# -n = do not set wallpaper (already done); still writes cache + Xresources
wal -i "$IMG" -n -q
~/.config/wal/hooks/10-light-variants.sh

# --- BUILD HYPRLAND COLORS FROM WAL JSON -----------------------------------
# Requires jq
JSON="$HOME/.cache/wal/colors.json"
if [[ ! -f "$JSON" ]]; then
  echo "colors.json not found at $JSON. wal may have failed." >&2
  exit 1
fi

# helpers: get hex like RRGGBB and convert to Hypr rgba(0xAARRGGBB)
hex() { jq -r "$1" "$JSON" | tr -d '#'; }
rgba() { printf "0xff%s" "$1"; } # ff = 100% alpha

BG=$(hex '.special.background')
FG=$(hex '.special.foreground')
ACC=$(hex '.colors.color3')
DIM="$ACC"

cat >"$HYPR_WAL" <<EOF
# Auto-generated by wallpaper.sh — DO NOT EDIT
\$bg  = $(rgba "$BG")
\$fg  = $(rgba "$FG")
\$acc = $(rgba "$ACC")
\$dim = $(rgba "$DIM")

# Example direct assignments (you can comment these out if you prefer just variables)
general {
  col.active_border        = \$acc
  col.inactive_border      = \$dim
}
EOF

cat >"$HYPRLOCK_WAL" <<EOF
# Auto-generated by wallpaper.sh — DO NOT EDIT

\$acc = $(rgba "$ACC")

input-field {
    size = 320, 58
    position = 0, 60 
    halign = center
    valign = bottom

    font_family = JetBrains Mono Nerd Font Mono

    placeholder_text =  $USER

    hide_input = false
    dots_size = 0.12
    dots_spacing = 0.9 
    dots_center = true

    fade_on_empty = true

    inner_color = rgba(30, 27, 41, 0.55)  # soft panel fill on bg
    outer_color = \$acc                   # accent border
    outline_thickness = 2
    outline_color = \$acc                 # accent outline
    font_color = rgba(216, 211, 231, 1.0) # subtext
    fail_color = rgba(243, 139, 168, 1.0) # error
}
EOF

# --- NUDGE APPS TO RELOAD ---------------------------------------------------
# Waybar CSS reload
#pkill -USR2 waybar

# Mako reload (if running)
command -v makoctl >/dev/null && makoctl reload 2>/dev/null || true

# Kitty picks up include automatically (no action needed if included; see below)

# Spicetify:
# We use Option A: theme color.ini references xrdb:colorN, which pywal just updated
if command -v spicetify >/dev/null 2>&1; then
  spicetify apply >/dev/null 2>&1 || true
fi

# Hyprland (reload to pick up new include)
hyprctl reload 2>/dev/null || true
