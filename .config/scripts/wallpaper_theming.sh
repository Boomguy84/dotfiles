#!/usr/bin/env bash
set -euo pipefail

# --- SETTINGS ---------------------------------------------------------------
# Folder containing wallpapers (change if you keep them elsewhere)
WALL_DIR="$HOME/.config/wallpapers"

# Hyprland include that we will (re)generate from pywal
HYPR_WAL="$HOME/.cache/wal/hyprland-wal.conf"

# --- PICK IMAGE -------------------------------------------------------------
IMG="${1:-}"

STATE_FILE="$HOME/.cache/current_wall.txt"

if [[ -z "$IMG" ]]; then
  mapfile -t CAND < <(find "$WALL_DIR" -type f \( -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.png' \))
  ((${#CAND[@]})) || {
    echo "No images in $WALL_DIR"
    exit 1
  }

  # read last wallpaper if it exists
  LAST=""
  [[ -f "$STATE_FILE" ]] && LAST="$(<"$STATE_FILE")"

  # pick until it's not the same
  while :; do
    NEW="${CAND[RANDOM % ${#CAND[@]}]}"
    [[ "$NEW" != "$LAST" ]] && {
      IMG="$NEW"
      break
    }
  done

  # save new wallpaper path
  echo "$IMG" >"$STATE_FILE"
fi

# --- SET WITH SWWW ----------------------------------------------------------
swww img "$IMG" --transition-type fade --transition-pos 0.5,0.5 --transition-duration 1

# --- GENERATE WAL PALETTE ---------------------------------------------------
# -n = do not set wallpaper (already done); still writes cache + Xresources
wal -i "$IMG" -n -q

# --- BUILD HYPRLAND COLORS FROM WAL JSON -----------------------------------
# Requires jq
JSON="$HOME/.cache/wal/colors.json"
if [[ ! -f "$JSON" ]]; then
  echo "colors.json not found at $JSON. wal may have failed." >&2
  exit 1
fi

# helpers: get hex like RRGGBB and convert to Hypr rgba(0xAARRGGBB)
hex() { jq -r "$1" "$JSON" | tr -d '#'; }
rgba() { printf "0xff%s" "$1"; } # ff = 100% alpha

BG=$(hex '.special.background')
FG=$(hex '.special.foreground')
ACC=$(hex '.colors.color3')
DIM="$ACC"

cat >"$HYPR_WAL" <<EOF
# Auto-generated by wallpaper.sh â€” DO NOT EDIT
\$bg  = $(rgba "$BG")
\$fg  = $(rgba "$FG")
\$acc = $(rgba "$ACC")
\$dim = $(rgba "$DIM")

# Example direct assignments (you can comment these out if you prefer just variables)
general {
  col.active_border        = \$acc
  col.inactive_border      = \$dim
}
EOF

# --- NUDGE APPS TO RELOAD ---------------------------------------------------
# Waybar CSS reload
pkill -USR2 waybar 2>/dev/null || true

# Mako reload (if running)
command -v makoctl >/dev/null && makoctl reload 2>/dev/null || true

# Kitty picks up include automatically (no action needed if included; see below)

# Spicetify:
# We use Option A: theme color.ini references xrdb:colorN, which pywal just updated
if command -v spicetify >/dev/null; then
  spicetify apply >/dev/null 2>&1 || true
fi

# Reload spotify_info
pkill -f "bash /home/scott/.config/scripts/spotify_info.sh"
nohup ~/.config/scripts/spotify_info.sh >/dev/null 2>&1 &

# Hyprland (reload to pick up new include)
hyprctl reload 2>/dev/null || true
